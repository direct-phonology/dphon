# -*- coding: utf-8 -*-
"""Classes for pairwise match alignment."""

from abc import ABC
from typing import Tuple, Iterable, Mapping

from lingpy.align.pairwise import sw_align

from dphon.match import Match

# Type for lingpy scoring matrices: a × b = 1.0 -> { ("a", "b"): 1.0 }
Scorer_T = Mapping[Tuple[str, str], float]


class Aligner(ABC):
    """Abstract class; implements pairwise alignment via the align() method."""

    def align(self, match: Match) -> Tuple[str, str, float]:
        """Align the match and return its two texts as strings, with score."""
        raise NotImplementedError


class SmithWatermanAligner(Aligner):
    """Simple local alignment using an autogenerated scoring matrix."""

    pad_char: str = "　"

    @classmethod
    def format(cls, sequence: Iterable[str]) -> str:
        """Join aligned results into a single string using custom separator."""
        return "".join(sequence).replace("-", cls.pad_char)

    def align(self, match: Match) -> Tuple[str, str, float]:
        """Return a Smith-Waterman alignment of the match sequences."""
        l, r, score = sw_align(match.left.text, match.right.text)
        return self.format(l[1]), self.format(r[1]), score


class SmithWatermanPhoneticAligner(SmithWatermanAligner):
    """Local alignment using a custom phonetic scoring matrix."""

    scorer: Scorer_T

    def __init__(self, scorer: Scorer_T) -> None:
        self.scorer = scorer

    def align(self, match: Match) -> Tuple[str, str, float]:
        """Return a Smith-Waterman phonetic alignment of the match sequences."""
        l, r, score = sw_align(match.left.text, match.right.text, self.scorer)
        return self.format(l[1]), self.format(r[1]), score
